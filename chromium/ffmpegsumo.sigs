// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//------------------------------------------------
// Functions from avcodec used in chromium code.
//------------------------------------------------
AVCodecContext *avcodec_alloc_context3(const AVCodec *codec);
void avcodec_free_context(AVCodecContext **avctx);
AVCodec *avcodec_find_decoder(enum AVCodecID id);
int av_new_packet(AVPacket *pkt, int size);
int avcodec_decode_audio4(AVCodecContext *avctx, AVFrame *frame, int *got_frame_ptr, const AVPacket *avpkt);
int avcodec_decode_video2(AVCodecContext *avctx, AVFrame *picture, int *got_picture_ptr, const AVPacket *avpkt);
int avcodec_open2(AVCodecContext *avctx, const AVCodec *codec, AVDictionary **options);
int avcodec_close(AVCodecContext *avctx);
const char *avcodec_get_name(enum AVCodecID id);
void av_free_packet(AVPacket *pkt);
void av_init_packet(AVPacket *pkt);
int av_dup_packet(AVPacket *pkt);
void avcodec_flush_buffers(AVCodecContext *avctx);
void av_register_bitstream_filter(AVBitStreamFilter *bsf);
AVBitStreamFilterContext *av_bitstream_filter_init(const char *name);
int av_bitstream_filter_filter(AVBitStreamFilterContext *bsfc, AVCodecContext *avctx, const char *args, uint8_t **poutbuf, int *poutbuf_size, const uint8_t *buf, int buf_size, int keyframe);
void av_bitstream_filter_close(AVBitStreamFilterContext *bsf);
int av_lockmgr_register(AVLockMgrOperation cb);
void avcodec_get_frame_defaults(AVFrame *pic);
void avcodec_align_dimensions(AVCodecContext *s, int *width, int *height);
int av_packet_split_side_data(AVPacket *pkt);
uint8_t *av_packet_get_side_data(AVPacket *pkt, enum AVPacketSideDataType type, int *size);
void av_frame_unref(AVFrame *frame);
void av_frame_free(AVFrame **frame);
void avcodec_free_frame(AVFrame **frame);
AVFrame* av_frame_alloc();
int av_packet_copy_props(AVPacket *dst, const AVPacket *src);

// RDFT functions.
RDFTContext *av_rdft_init(int nbits, enum RDFTransformType trans);
void av_rdft_calc(RDFTContext *s, FFTSample *data);
void av_rdft_end(RDFTContext *s);


//------------------------------------------------
// Functions from avformat used in chromium code.
//------------------------------------------------
void avformat_close_input(AVFormatContext **s);
int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp, int flags);
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options);
int av_read_frame(AVFormatContext *s, AVPacket *pkt);
void av_register_all(void);
int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp, int flags);
AVFormatContext *avformat_alloc_context(void);
void avformat_free_context(AVFormatContext *s);
AVIOContext *avio_alloc_context(unsigned char *buffer, int buffer_size, int write_flag, void *opaque, AVIOReadWriteOperation read_packet, AVIOReadWriteOperation write_packet, AVIOSeekOperation seek);
int avio_close(AVIOContext *s);
int av_opt_get_int(void *obj, const char *name, int search_flags, int64_t *out_val);


//------------------------------------------------
// Functions from avutil used in chromium code.
//------------------------------------------------
int av_get_bytes_per_sample(enum AVSampleFormat sample_fmt);
int64_t av_rescale_q(int64_t a, AVRational bq, AVRational cq);
void *av_malloc(size_t size);
void av_free(void *ptr);
void av_log_set_level(int level);
void av_log_set_callback(AVLogCallback callback);
void av_log_default_callback(void *avcl, int level, const char *fmt, va_list vl);
void av_log_format_line(void *ptr, int level, const char *fmt, va_list vl, char *line, int line_size, int *print_prefix);
int av_dict_set(AVDictionary **pm, const char *key, const char *value, int flags);
AVDictionaryEntry *av_dict_get(const AVDictionary *m, const char *key, const AVDictionaryEntry *prev, int flags);
int av_samples_get_buffer_size(int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align);
int av_image_check_size(unsigned int w, unsigned int h, int log_offset, void *log_ctx);
int av_image_fill_linesizes(int *linesizes, enum PixelFormat pix_fmt, int width);
AVBufferRef *av_buffer_create(uint8_t *data, int size, AVFreeOperation free, void *opaque, int flags);
int avcodec_fill_audio_frame(AVFrame *frame, int nb_channels, enum AVSampleFormat sample_fmt, const uint8_t *buf, int buf_size, int align);
void *av_buffer_get_opaque(const AVBufferRef *buf);

//------------------------------------------------
// Functions from ffmpeg used for vp8 encoding.
//------------------------------------------------
int av_strerror(int errnum, char *errbuf, size_t errbuf_size);
void av_log(void *avcl, int level, const char *fmt, ...) av_printf_format(3, 4);
int64_t av_rescale_rnd(int64_t a, int64_t b, int64_t c, enum AVRounding rnd) av_const;
int av_get_channel_layout_nb_channels(uint64_t channel_layout);
int av_opt_set_int(void *obj, const char *name, int64_t val, int search_flags);
int av_opt_set_sample_fmt(void *obj, const char *name, enum AVSampleFormat fmt, int search_flags);
int av_frame_get_buffer(AVFrame *frame, int align);
int av_frame_make_writable(AVFrame *frame);
void av_packet_rescale_ts(AVPacket *pkt, AVRational tb_src, AVRational tb_dst);
AVCodec *avcodec_find_encoder(enum AVCodecID id);
int avcodec_encode_video2(AVCodecContext *avctx, AVPacket *avpkt, const AVFrame *frame, int *got_packet_ptr);
int avcodec_encode_audio2(AVCodecContext *avctx, AVPacket *avpkt, const AVFrame *frame, int *got_packet_ptr);
int avio_open(AVIOContext **s, const char *url, int flags);
int avformat_alloc_output_context2(AVFormatContext **ctx, AVOutputFormat *oformat, const char *format_name, const char *filename);
AVStream *avformat_new_stream(AVFormatContext *s, const AVCodec *c);
int avformat_write_header(AVFormatContext *s, AVDictionary **options);
int av_interleaved_write_frame(AVFormatContext *s, AVPacket *pkt);
int av_write_trailer(AVFormatContext *s);
void av_dump_format(AVFormatContext *ic, int index, const char *url, int is_output);
void sws_freeContext(struct SwsContext *swsContext);
struct SwsContext *sws_getContext(int srcW, int srcH, enum AVPixelFormat srcFormat, int dstW, int dstH, enum AVPixelFormat dstFormat, int flags, SwsFilter *srcFilter, SwsFilter *dstFilter, const double *param);
int sws_scale(struct SwsContext *c, const uint8_t *const *srcSlice, const int *srcStride, int srcSliceY, int srcSliceH, uint8_t *const *dst, const int *dstStride);
struct SwrContext *swr_alloc(void);
int swr_init(struct SwrContext *s);
void swr_free(struct SwrContext **s);
int swr_convert(struct SwrContext *s, uint8_t **out, int out_count, const uint8_t **in , int in_count);
int64_t swr_get_delay(struct SwrContext *s, int64_t base);
int64_t av_get_default_channel_layout(int nb_channels);
void av_image_copy(uint8_t **dst_data, int *dst_linesizes, const uint8_t **src_data, const int *src_linesizes, enum AVPixelFormat pix_fmt, int width, int height);
void avpriv_color_frame(AVFrame *frame, const int *c);
const AVPixFmtDescriptor *av_pix_fmt_desc_get(enum AVPixelFormat pix_fmt);

//------------------------------------------------
// Functions from ffmpeg used for muxing sample.
//------------------------------------------------
//double avpriv_strtod(const char *nptr, char **endptr);
//int avpriv_snprintf(char *s, size_t n, const char *fmt, ...);
//void av_dict_copy(AVDictionary **dst, const AVDictionary *src, int flags);
//void av_dict_free(AVDictionary **pm);
//int av_compare_ts(int64_t ts_a, AVRational tb_a, int64_t ts_b, AVRational tb_b);
//int avio_closep(AVIOContext **s);
